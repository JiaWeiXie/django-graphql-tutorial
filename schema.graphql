"""
Will check if the user has any/all permissions to resolve this.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

type Category implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  slug: String!
  parent: Category
  name: String!
  path: String!
}

type Comment implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  post: Post!
  parent: Comment
  author: User
  content: String!
}

type CreatePostResult {
  post: Post
  errors: [FormValidationError!]
}

"""Date with time (isoformat)"""
scalar DateTime

type DjangoImageType {
  name: String!
  path: String!
  size: Int!
  url: String!
  width: Int!
  height: Int!
}

type DuplicateError implements FormError {
  field: String!
  message: String!
}

interface FormError {
  field: String!
  message: String!
}

union FormValidationError = ValidationError | InvalidChoiceError | DuplicateError

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

type InvalidChoiceError implements FormError {
  field: String!
  message: String!
  value: String!
}

type Mutation {
  updatePost(data: PostInputPartial!): UpdatePostPayload!
  createPost(data: PostInput!): CreatePostResult!
  publishPost(
    """Input data for `publishPost` mutation"""
    input: PublishPostInput!
  ): PublishPostPayload! @hasPerm(permissions: [{app: "blog", permission: "publish_post"}], any: true)
  uploadPostCoverImage(postId: UUID!, file: Upload!): UploadPostCoverImagePayload!
  userRegister(data: UserRegisterInput!): UserRegisterPayload!
  userEdit(data: UserEditInput!): UserEditPayload!
  login(username: String!, password: String!): User!
  logout: Boolean!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
}

type OperationInfo {
  """List of messages returned by the operation."""
  messages: [OperationMessage!]!
}

type OperationMessage {
  """The kind of this message."""
  kind: OperationMessageKind!

  """The error message."""
  message: String!

  """
  The field that caused the error, or `null` if it isn't associated with any particular field.
  """
  field: String

  """The error code, or `null` if no error code was set."""
  code: String
}

enum OperationMessageKind {
  INFO
  WARNING
  ERROR
  PERMISSION
  VALIDATION
}

enum Ordering {
  ASC
  DESC
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  slug: String!
  author: User!
  title: String!
  content: String!
  publishedAt: DateTime
  published: Boolean
  tags(filters: TagFilter, order: TagOrder): [Tag!]!
  categories: [Category!]!
  coverImage: DjangoImageType
  comments: [Comment!]!
}

"""A connection to a list of items."""
type PostConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [PostEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type PostEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Post!
}

input PostFilter {
  id: UUID
  slug: String
  tags: TagFilter
  title: TitleFilterLookup
  search: String
  AND: PostFilter
  OR: PostFilter
}

input PostInput {
  slug: String!
  title: String!
  content: String!
  tags: [GlobalID!]!
  categories: [GlobalID!]!

  """Username of the author"""
  author: String!
}

input PostInputPartial {
  id: GlobalID!
  slug: String
  title: String
  content: String
  tags: [GlobalID!]
  categories: [GlobalID!]
  publishedAt: DateTime
  published: Boolean
}

input PostOrder {
  publishedAt: Ordering
}

input PublishPostInput {
  id: UUID!
}

union PublishPostPayload = Post | OperationInfo

type Query {
  posts(
    filters: PostFilter
    order: PostOrder

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): PostConnection!
  tags(filters: TagFilter, order: TagOrder): [Tag!]!
  categories: [Category!]!
  comments: [Comment!]!
  users: [User!]!
  me: User
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: String
  nIExact: String
  nContains: String
  nIContains: String
  nInList: [String!]
  nGt: String
  nGte: String
  nLt: String
  nLte: String
  nStartsWith: String
  nIStartsWith: String
  nEndsWith: String
  nIEndsWith: String
  nRange: [String!]
  nIsNull: Boolean
  nRegex: String
  nIRegex: String
}

type Tag implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  name: String!
}

input TagFilter {
  name: StrFilterLookup
  AND: TagFilter
  OR: TagFilter
}

input TagOrder {
  name: Ordering
}

input TitleFilterLookup {
  contains: String
  inList: [String!]
}

scalar UUID

union UpdatePostPayload = Post | OperationInfo

scalar Upload

union UploadPostCoverImagePayload = Post | OperationInfo

type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isSuperuser: Boolean!
  isStaff: Boolean!
  isActive: Boolean!
}

input UserEditInput {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isSuperuser: Boolean = false
  isStaff: Boolean = false
  isActive: Boolean = true
}

union UserEditPayload = User | OperationInfo

input UserRegisterInput {
  username: String!
  password: String!
}

union UserRegisterPayload = User | OperationInfo

type ValidationError implements FormError {
  field: String!
  message: String!
}

"""Permission definition for schema directives."""
input PermDefinition {
  """
  The app to which we are requiring permission. If this is empty that means that we are checking the permission directly.
  """
  app: String

  """
  The permission itself. If this is empty that means that we are checking for any permission for the given app.
  """
  permission: String
}
